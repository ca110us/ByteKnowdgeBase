(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{165:function(t,e,r){"use strict";r.r(e);var n=r(0),i=Object(n.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://coolshell.cn/articles/1038.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程命名中的7+1个提示"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://coolshell.cn/articles/990.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程中的命名设计那点事"),r("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命名规范","aria-hidden":"true"}},[this._v("#")]),this._v(" 命名规范")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"如何取一个好的变量名？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何取一个好的变量名？","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何取一个好的变量名？")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[r("p",[r("strong",[t._v("变量应该是尽可能的望文知意。千万不要使用教材中的命名方式。")])]),t._v(" "),r("p",[t._v("好的变量： daysDateRange, flightNumber, carColor.\n坏的变量： days, dRange, temp, data, aux…")]),t._v(" "),r("p",[t._v("在我们的日常工作中，有很大数量的开发人员喜欢使用短的变量名，而不是有含义的变量名。这主要是因为我们大学教科书的那些示例所造成的，人都是先入为主，所以，教科书中的那些很抽象，带着演示的变量命名影响了我们一代又一代的程序员，并影响了他们很多年。虽然那些短的，教材式的变量名，可能会让你少打一些字，但其实，这是非常非常不好的。因为软件的维护成本远远大于了软件的开发成本，如果你不取一个好的一点的变量名，那么当进行代码评审时，当进行bug fixing时，当进行代码重构时，当进行代码维护时，你的某个变量名可能会让你一头雾水，不知道所措，还可以会让你走入陷阱，造成更大的时间成本。所以，一个可阅读的代码必然和那些不错的变量名分不开，而这也能让你的软件间接上有更好的质量。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("变量名不要太长，尽可能地简短")])]),t._v(" "),r("p",[t._v("只有简单和简短的变量名才是容易阅读的。因为你的变量名一定会用于程序语句中，所以，为了让你的程序语句看起来的简短，你的变量名也应该短一点，不然写出来的一个表达式就会显得很复杂。")]),t._v(" "),r("p",[t._v("当然，在有些时候，一个有含义的变量名和一个简短的变量名可能存在一些冲突。这相当锻炼我们的语言能力——如果有最精炼的词语来表达最丰富的含义。如果实在做不到，那么，取一个有含义的变量名要比取一个简短的变量名更好一些。不管怎么样，我们希望即简短又有丰富的含义，但如果不能两全，那有含义优先级更高一些。")]),t._v(" "),r("p",[t._v("坏的变量：howLonDoesItTakeToOpenTheDoor， howBigIsTheMaterial…\n好的变量：timeToOpenTheDoor， materialSize.")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("可以使用缩写，但需要有一些注释")])]),t._v(" "),r("p",[t._v("有一些时候，我们需要使用一些缩写来命名变量，比如：用usr来表示user，用gp来表示group，用conf来表示configuration，用cwd来表示current working directory，用ptr来代码point to reference，等等，等等。缩写一般要用在大家可以看得懂的，而不是为了缩写而缩短一个单词，当然，如果你把缩写后的变量名加上注释，那就更加稳妥了。关于一些约定俗成的缩写，可参看本文的附录一。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("不要使用反逻辑来命名")])]),t._v(" "),r("p",[t._v("好的命名：  IsEnabled.\n坏的命名： IsNotEnabled.\n在阅读的时候，我们更喜欢正向的逻辑，而不是反向逻辑。这一规则不单单的命名，在条件语句中，我们也是要尽量不要使用这种反面的逻辑。如：if (! (isAdmin || isUser))，这样的语句很不符合人读代码的习惯，写成这样会更好一些——if (!isAdmin && !isUser)。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("保持一致性")])]),t._v(" "),r("p",[t._v("保持所有代码的一致性。使用相同的命名规则。这外世界上没有最好的命名规范。但有一点是可以确认的，那就是在一个代码库中，应该使用一致的命名规则，即使这个规则不那么好，但整个团队使用一致的就是好的。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("附和应用程序的领域术语")])]),t._v(" "),r("p",[t._v("在不同的领域中，不同的观念会有非常特别和不同的意思。例如：单词“order”并不总是意味着“次顺”，有些时候，其意味着“订单”，有些时候，意味着“命令”，有些时候，意为着“规则”。所以，在某个领域中，某些单词会有不同的含义，所以，这需要我们的命令去附和这些领域。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("黄金法则 - 花一些时间去思考去权衡一下你的变量名")])]),t._v(" "),r("p",[t._v("当你设计好一个的变量名一个函数名的时候，别着急去使用他，停下来，想一想，这个变量名是否合适，是否还有更好的？也许你正在使用的是一个很不好的变量名。有些时候，需要我们权衡利弊一下，可能还要去和同事讨论一下。")]),t._v(" "),r("p",[t._v("总之，变量名是编程的第一步，第一步走好了，后面才走得好。试想，无论是你或你的同事在使用一些好的变量名编程是一件多么轻松的事啊。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考")])}],!1,null,null,null);i.options.__file="naming.md";e.default=i.exports}}]);